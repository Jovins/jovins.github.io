(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{218:function(t,n,a){"use strict";a.r(n);var e=a(0),i=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"git命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git命令","aria-hidden":"true"}},[t._v("#")]),t._v(" Git命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git init  // 创建代码仓库\ngit status // 查看仓库状态\ngit add .  // 将代码添加到暂缓区\ngit commit -m '注释' // 添加到本地代码仓库\ngit remote // 查看本地代码仓库是否关联远程仓库\ngit remote --help // 帮助\ngit remote add origin + url  // eg: https://github.com/Jovins/VRPhoto.git\ngit push origin master // 提交到远程代码仓库\n\n/// 打标签\ngit tag  // 查看是否已经打标签\ngit tag -a '1.0.0' -m '注释' // 打一个标签1.0.0 \ngit push --tags // 提交所有标签\ngit log // 查看标签日记 \ngit tag -d 1.0.0  //  删除本地标签\ngit push origin :1.0.0 // 删除远程标签\n\n// pod \npod spec create LoaderButton  // 创建LoaderButton.podspec描述文件\npod init // 初始化代码仓库\npod repo // 查看代码仓库url\npod repo --help \npod lib lint // 本地验证描述文件\npod spec lint // 远程验证\npod repo push master xxx.podspec  // 提交到本地索引库(实质上提交到本地时会做提交到远程索引库)\n\n/// cocoapods \n// 首先需要将本机注册到trunk\npod trunk register <E-mail> '<用户名>' --description='<设备别名>'\n// 通过配置好的Podspec，我们可以将库提交到CocoaPods上。\npod trunk push <文件名>.podspec\n// 查看是库是否已经在CocoaPods上\npod search <库名>\n// 如果查找不到，可以尝试\npod search <库名> --simple\n// 删除指定版本\npod trunk delete <库名> <版本号>\n")])])]),a("h2",{attrs:{id:"创建pods库的模板库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建pods库的模板库","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建pods库的模板库")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pod lib create [name] \nWhat platform do you want to use?? [ iOS / macOS ]\n> iOS\nwhat is your name?\n> jovins\nwhat is your email?\n> jovinscoder@163.com\nwhat language do you want to use?[Swift/Objc]\n> Swift\nWould you like to include a demo application with your library? [Yes/No]\n> Yes\nWhich testing frameworks will you use?[Specta / Kiwi / None]\n> None\nWould you like to do view based testing? [Yes / No]\n> No\nWhat is your Class prefix?\n> WM\n")])])]),a("p",[t._v("删除Development Pods -> [name] -> [name] -> Classes中的ReplaceMe.m")]),t._v(" "),a("p",[t._v("然后把框架代码放到Classes文件中，cd 到example目录，执行pod install")]),t._v(" "),a("h2",{attrs:{id:"私有库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#私有库","aria-hidden":"true"}},[t._v("#")]),t._v(" 私有库")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 1、创建远程私有库(url)\npod repo add [master] url\n// 2、将远程私有库clone到本地\n\n// 本地创建一个pod 私有库的模板库\npod lib create [name]\n// 将核心代码拖入Classes文件夹中\npod install\n// 编写描述文件\n\n// 上传代码/tag\ngit add .\ngit commit -m '注释'\ngit remote add origin + url \ngit push origin master\n\ngit tag -a '1.0.0' -m '注释'\ngit push --tags\n\n// 向私有索引库提交spec描述文件\npod lib lint\npod spec lint\npod repo push [master] xxx.podspec\n\n")])])]),a("h2",{attrs:{id:"常用-git-命令清单"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用-git-命令清单","aria-hidden":"true"}},[t._v("#")]),t._v(" 常用 Git 命令清单")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Workspace：工作区\nIndex / Stage：暂存区\nRepository：仓库区（或本地仓库）\nRemote：远程仓库\n")])])]),a("h2",{attrs:{id:"新建代码库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建代码库","aria-hidden":"true"}},[t._v("#")]),t._v(" 新建代码库")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n")])])]),a("h2",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),a("p",[t._v("Git的设置文件为"),a("code",[t._v(".gitconfig")]),t._v("，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name "[name]"\n$ git config [--global] user.email "[email address]"\n')])])]),a("h2",{attrs:{id:"增加-删除文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增加-删除文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 增加/删除文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n")])])]),a("h2",{attrs:{id:"代码提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码提交","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码提交")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n")])])]),a("h2",{attrs:{id:"分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n")])])]),a("h2",{attrs:{id:"标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签","aria-hidden":"true"}},[t._v("#")]),t._v(" 标签")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n")])])]),a("h2",{attrs:{id:"查看信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看信息","aria-hidden":"true"}},[t._v("#")]),t._v(" 查看信息")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的代码差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat "@{0 day ago}"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n# 从本地master拉取代码更新当前分支：branch 一般为master\n$ git rebase [branch]\n')])])]),a("h2",{attrs:{id:"远程同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程同步","aria-hidden":"true"}},[t._v("#")]),t._v(" 远程同步")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n")])])]),a("h2",{attrs:{id:"撤销"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销","aria-hidden":"true"}},[t._v("#")]),t._v(" 撤销")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n")])])]),a("h2",{attrs:{id:"回滚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回滚","aria-hidden":"true"}},[t._v("#")]),t._v(" 回滚")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git reset --hard HEAD^         回退到上个版本\n$ git reset --hard HEAD~3        回退到前3次提交之前，以此类推，回退到n次提交之前\n$ git reset --hard commit_id     退到/进到 指定commit的sha码\n")])])]),a("h2",{attrs:{id:"合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并","aria-hidden":"true"}},[t._v("#")]),t._v(" 合并")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('对于复杂的系统，我们可能要开好几个分支来开发，那么怎样使用git合并分支呢？\n\n合并步骤：\n1、进入要合并的分支（如开发分支合并到master，则进入master目录）\ngit checkout master\ngit pull\n\n2、查看所有分支是否都pull下来了\ngit branch -a\n\n3、使用merge合并开发分支\ngit merge 分支名\n\n4、查看合并之后的状态\ngit status\n\n5、有冲突的话，通过IDE解决冲突；\n\n6、解决冲突之后，将冲突文件提交暂存区\ngit add 冲突文件\n\n7、提交merge之后的结果\ngit commit\n\n如果不是使用git commit -m "备注" ，那么git会自动将合并的结果作为备注，提交本地仓库；\n\n8、本地仓库代码提交远程仓库\ngit push\n\ngit将分支合并到分支，将master合并到分支的操作步骤是一样的。\n')])])])])}],!1,null,null,null);n.default=i.exports}}]);