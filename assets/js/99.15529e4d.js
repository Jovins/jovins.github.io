(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{456:function(t,s,e){"use strict";e.r(s);var a=e(0),r=Object(a.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),e("p",[t._v("我之前在 "),e("code",[t._v("What’s new in Swift 5.0")]),t._v(" 一文中介绍了 Swift 5 中的所有新功能，甚至还有一个专门用于"),e("a",{attrs:{href:"https://www.whatsnewinswift.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("跟踪 Swift 最新功能的网站"),e("OutboundLink")],1),t._v("。在本文中我想谈谈如何在 Swift 5 中使用原始字符串，同时还提供了一些有用的详细示例，以便更清楚地了解它们的用处。")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),e("p",[t._v("这样，以下两个字符串是相同的：")]),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._v(" "),e("p",[t._v("例如，以下这些都创建相同的字符串：")]),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._m(19),t._v(" "),e("p",[t._v("Swift Evolution 在原始字符串的 proposal 中列出了三个使用原始字符串的例子。具体来说，是以下情形的代码：")]),t._v(" "),t._m(20),t._v(" "),e("p",[t._v("前两个是最有可能影响你的：向已经转义的字符串添加转义通常会使代码更难以阅读。")]),t._v(" "),e("p",[t._v("作为一个例子，让我们来看看正则表达式。假设我们有一个像这样的字符串：")]),t._v(" "),t._m(21),t._m(22),t._v(" "),e("p",[t._v("如果我们想要创建一个正则表达式来查找所有字符串插值，我们将以 "),e("code",[t._v("\\([^)])")]),t._v(" 开头。这表示着“反斜杠，左括号，一个或多个不是右括号的字符，然后是右括号。（如果你还没有使用达正则表达式，建议看下 "),e("a",{attrs:{href:"https://www.hackingwithswift.com/store/beyond-code",target:"_blank",rel:"noopener noreferrer"}},[t._v("Beyond Code 这本书"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("但是，我们不能在 Swift 中使用它 - 因为这是无效的：")]),t._v(" "),t._m(23),t._m(24),t._v(" "),t._m(25),e("p",[t._v("But now there’s a second problem: when that string reaches the regex system it will be read as ([^)]), so the regex system will assume we’re escaping the opening parenthesis as opposed to typing a literal backslash, so we need to add another escape for the regex system:")]),t._v(" "),t._m(26),t._v(" "),t._m(27),e("p",[t._v("而这时 Swift 又会抱怨，因为它认为我们要同时转义反斜杠并括号，所以我们需要第四个反斜杠：")]),t._v(" "),t._m(28),e("p",[t._v("是的，现在有四个反斜杠：一个是我们想要匹配的，一个是在 Swift 中用于转义的，一个是在正则表达式引擎中用于转义的，另一个是转义正在使用 Swift 中的一个正则表达式引擎（太绕）。")]),t._v(" "),e("p",[t._v("然而这个正则表达式仍然无法正常使用。")]),t._v(" "),e("p",[t._v("你看，我们还需要转义我们想要匹配的左括号和右括号，这意味着完整的正则表达式是这样的：")]),t._v(" "),t._m(29),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),e("p",[t._v("该正则表达式模式没有 Swift 独有的转义，因此您可以在 "),e("a",{attrs:{href:"https://regex101.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("regex101.com"),e("OutboundLink")],1),t._v(" 等网站上试用它而无需修改。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"swift-5-中使用原始字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#swift-5-中使用原始字符串","aria-hidden":"true"}},[this._v("#")]),this._v(" Swift 5 中使用原始字符串")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[this._v("#")]),this._v(" 前言")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Swift 5 中的"),s("code",[this._v("原始字符串(raw string)")]),this._v("让我们能够编写出更自然的字符串，尤其是在使用"),s("code",[this._v("反斜杠")]),this._v("和"),s("code",[this._v("引号")]),this._v("时。正如将在下面看到的那样，在某些情况下效果是很明显的，如正则表达式。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果你曾经问过自己“Swift 中的那些带标签 "),s("code",[this._v("#")]),this._v(" 的字符串是什么？” 的话，你应该能在这篇文章中找到答案！")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),s("p",[this._v("提示：原始字符串是完全可选的 - 重要的是你至少知道它们是什么，这样你就可以在某段代码中看到它们时知道这是什么，而不一定需要在你自己的代码中使用它们。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"什么是原始字符串？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是原始字符串？","aria-hidden":"true"}},[this._v("#")]),this._v(" 什么是原始字符串？")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("在 Swift 5 中，我们能够使用 "),e("code",[t._v("#")]),t._v(" 符号来指定自定义字符串的分割符。 当我们使用带 "),e("code",[t._v("#")]),t._v(" 的字符串时，它会影响到 Swift 解析字符串中特殊字符的方式："),e("code",[t._v("\\")]),t._v(" 不再作为转义字符，所以 "),e("code",[t._v("\\n")]),t._v(" 字面意思是反斜杠跟着 "),e("code",[t._v("“n”")]),t._v(" 而不是换行符，而 "),e("code",[t._v("\\(variable)")]),t._v(" 不再表示字符串插值，而是实实在在的字符串。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regularString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\Hello \\\\World"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" rawString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" #"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\Hello \\World"')]),t._v("#\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("请注意，在第二个示例中，字符串以 "),s("code",[this._v("#")]),this._v(" 开头和结尾，这标志着它是一个原始字符串。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在可以在字符串内使用相同的 "),s("code",[this._v("#")]),this._v(" 符号，用于标记特殊字符。例如，如果要使用字符串插值，现在应该使用 "),s("code",[this._v("\\#(variableName)")]),this._v(" 而不是 "),s("code",[this._v("\\(variableName)")]),this._v("，如下所示：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Taylor"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" greeting "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" #"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, \\#(name)!"')]),t._v("#\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们也可以将 "),s("code",[this._v("#")]),this._v(" 与多行字符串一起使用，如下所示：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" message "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" #"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v('"\n'),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("This")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" rendered "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \\"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("example"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("This")]),t._v(" uses string interpolation"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \\#"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("example"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v('"#\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"使用分隔符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用分隔符","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用分隔符")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("虽然这是理论上应该永远不需要的功能，但可以在字符串周围添加更多 "),s("code",[this._v("#")]),this._v("，以创建更多的唯一的字符串分隔符。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" zero "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is a string"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" one "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" #"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is a string"')]),t._v("#\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" two "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ##"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is a string"')]),t._v("##\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" three "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ###"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is a string"')]),t._v("###\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" four "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ####"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is a string"')]),t._v("####\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这种情况存在的原因是我们想根据自己的需要来结束字符串，这样当你需要在字符串中使用 "),s("code",[this._v('"#')]),this._v(" 这种比较少的情形时，也不会遇到问题。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("应该强调的是，这种情况非常少见。例如，你想写一个字符串，如 "),e("code",[t._v('My dog said "woof"#gooddog')]),t._v(" -- 注意在 "),e("code",[t._v('"woof"')]),t._v(" 后面没有空格，后面直接跟了一个 Twitter 风格的标签 "),e("code",[t._v("#gooddog")]),t._v("。如果只使用单个分割符的原始字符串，Swift 会将 "),e("code",[t._v("#gooddog")]),t._v(" 中的 "),e("code",[t._v("#")]),t._v(" 视为结束符，所以我们需要如下处理：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ##"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My dog said "')]),t._v("woof"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#gooddog"')]),t._v("##\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"为什么原始字符串有用？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么原始字符串有用？","aria-hidden":"true"}},[this._v("#")]),this._v(" 为什么原始字符串有用？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("被转义掩盖了。转义会损害代码审查和验证。")]),this._v(" "),s("li",[this._v("已经转义了。转义的内容不应由编译器预先解释。")]),this._v(" "),s("li",[this._v("无论是为了测试还是仅更新源，都需要在源和代码之间轻松传输。")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" message "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" #"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"String interpolation looks like this: '),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v("\\(")]),t._v("age"),e("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v(")")])]),t._v('."')]),t._v("#\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里使用原始字符串来展示字符串插值的语义而不是实际使用它 - 字符串 "),s("code",[this._v("(age)")]),this._v(" 将出现在文本中，而不是被 "),s("code",[this._v("age")]),this._v(" 的实际值替换。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSRegularExpression")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v("\\(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v(")")])]),t._v('])"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Swift将 "),s("code",[this._v("\\")]),this._v(" 视为转义字符，并假定我们正在尝试在正则表达式中使用字符串插值。所以，我们需要两个反斜杠来做转义，如下所示：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSRegularExpression")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\'),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v("\\(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v(")")])]),t._v(']+)"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("但现在又有第二个问题：当正则表达式系统处理该字符串时，会将 "),s("code",[this._v("\\([^]])")]),this._v(" 作为输入，因此正则表达式系统将假设我们正在转义左括号而不是将 "),s("code",[this._v("\\")]),this._v(" 当作文本处理，所以我们需要为正则表达式系统添加另一个转义：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSRegularExpression")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\'),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v("\\(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v(")")])]),t._v(']+)"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSRegularExpression")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\\\'),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v("\\(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v(")")])]),t._v(']+)"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSRegularExpression")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\\\\\\\'),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v("\\(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v(")")])]),t._v(']+\\\\)"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("请记住，我们在正则表达式引擎中添加 "),s("code",[this._v("\\")]),this._v(" 以转义 "),s("code",[this._v("(")]),this._v(" ，同时在 Swift 中也要添加了一个 "),s("code",[this._v("\\")]),this._v(" 以转义正则表达式的引用。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("如果我们使用原始字符串，我们仍然需要转义正则表达式引擎的字符：为了匹配 "),e("code",[t._v("\\")]),t._v(" 我们必须写 "),e("code",[t._v("\\")]),t._v("，为了匹配 "),e("code",[t._v("(")]),t._v(" 我们必须写 "),e("code",[t._v("(")]),t._v("。但是，至少我们不再需要为Swift添加额外的转义字符。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以，我们最终只需要一半的 "),s("code",[this._v("\\")]),this._v("：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-swift extra-class"},[e("pre",{pre:!0,attrs:{class:"language-swift"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSRegularExpression")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" #"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\'),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v("\\(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v(")")])]),t._v(']+\\)"')]),t._v("#"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])}],!1,null,null,null);s.default=r.exports}}]);