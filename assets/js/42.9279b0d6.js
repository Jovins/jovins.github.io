(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{360:function(t,s,a){t.exports=a.p+"assets/img/swift-codable-01.4b3a6546.png"},477:function(t,s,a){"use strict";a.r(s);var e=[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"swift-4-codable-协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#swift-4-codable-协议","aria-hidden":"true"}},[this._v("#")]),this._v(" Swift 4 Codable 协议")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("WWDC 过去有一段时间了，最近终于有时间空闲，可以静下心来仔细研究一下相关内容。对于开发者来说，本届WWDC 最重要的消息还是得属 Swift 4 的推出。")]),t._v(" "),a("p",[t._v("Swift 经过三年的发展，终于在 API 层面趋于稳定。从 Swift 3 迁移代码到 Swift 4 终于不用像 2 到 3 那样痛苦了。这对开发者来说实在是个重大利好，应该会吸引一大批对 Swift 仍然处于观望状态的开发者加入。")]),t._v(" "),a("p",[t._v("另外 Swift 4 引入了许多新的特性，像是 fileprivate 关键字的限制范围更加精确了；声明属性终于可以同时限制类型和协议了；新的 KeyPath API 等等，从这些改进我们可以看到，Swift 的生态越来越完善，Swift 本身也越来越强大。")]),t._v(" "),a("p",[t._v("而 Swift 4 带来的新特性中，最让人眼前一亮的，我觉得非 "),a("strong",[t._v("Codable")]),t._v(" 协议莫属，下面就来介绍下我自己对 "),a("strong",[t._v("Codable")]),t._v(" 协议踩坑的经验总结。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍","aria-hidden":"true"}},[this._v("#")]),this._v(" 介绍")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Swift 由于类型安全的特性，对于像 JSON 这类弱类型的数据处理一直是一个比较头疼的问题，虽然市面上许多优秀的第三方库在这方面做了不少努力，但是依然存在着很多难以克服的缺陷，所以 "),s("strong",[this._v("Codable")]),this._v(" 协议的推出给我们解决类似问题提供了新的思路。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("通过查看定义可以看到，"),s("strong",[this._v("Codable")]),this._v(" 其实是一个组合协议，由 "),s("code",[this._v("Decodable")]),this._v(" 和 "),s("code",[this._v("Encodable")]),this._v(" 两个协议组成：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// A type that can convert itself into and out of an external representation.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Codable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Decodable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Encodable")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// A type that can encode itself to an external representation.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Encodable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("to encoder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Encoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// A type that can decode itself from an external representation.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protocol")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Decodable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("from decoder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Decoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("Encodable")]),t._v(" 和 "),a("code",[t._v("Decodable")]),t._v(" 分别定义了 "),a("code",[t._v("encode(to:)")]),t._v(" 和 "),a("code",[t._v("init(from:)")]),t._v(" 两个协议函数，分别用来实现数据模型的归档和外部数据的解析和实例化。最常用的场景就是接口 JSON 数据解析和模型创建。但是 "),a("strong",[t._v("Codable")]),t._v(" 的能力并不止于此，这个后面会说。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"解析-json-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析-json-对象","aria-hidden":"true"}},[this._v("#")]),this._v(" 解析 JSON 对象")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("先来看 "),a("code",[t._v("Decodable")]),t._v(" 对 JSON 数据对象的解析。Swift 为我们做了绝大部分的工作，Swift 中的基本数据类型比如 "),a("code",[t._v("String")]),t._v("、"),a("code",[t._v("Int")]),t._v("、"),a("code",[t._v("Float")]),t._v(" 等都已经实现了 "),a("strong",[t._v("Codable")]),t._v(" 协议，因此如果你的数据类型只包含这些基本数据类型的属性，只需要在类型声明中加上 "),a("strong",[t._v("Codable")]),t._v(" 协议就可以了，不需要写任何实际实现的代码，这也是 "),a("strong",[t._v("Codable")]),t._v(" 最大的优势所在。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" jsonString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v('"\n'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小明"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"age"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"weight"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("43.2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v('"\n')])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这时候，只需要定义一个 "),s("code",[this._v("Student")]),this._v(" 类型，声明实现 "),s("code",[this._v("Decodable")]),this._v(" 协议即可，Swift 4 已经为我们提供了默认的实现：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Decodable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Int")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" weight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Float")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然后，只需要一行代码就可以将 "),s("em",[s("strong",[this._v("小明")])]),this._v(" 解析出来了：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" xiaoming "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("JSONDecoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" from"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" jsonString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("using"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utf8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" xiaoming "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("JSONDecoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" from"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 异常处理")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"特殊数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊数据类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 特殊数据类型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("很多时候光靠基本数据类型并不能完成工作，往往我们需要用到一些特殊的数据类型。Swift 对许多特殊数据类型也提供了默认的 "),s("strong",[this._v("Codable")]),this._v(" 实现，但是有一些限制。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h5",{attrs:{id:"枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#枚举","aria-hidden":"true"}},[this._v("#")]),this._v(" 枚举")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gender"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"male"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Gender")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" male\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" female\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" other\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("枚举类型也默认实现了 "),s("strong",[this._v("Codable")]),this._v(" 协议，但是如果我们直接声明 "),s("code",[this._v("Gender")]),this._v(" 枚举支持 "),s("strong",[this._v("Codable")]),this._v(" 协议，编译器会提示没有提供实现：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:a(360),alt:"img"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("其实这里有一个限制：枚举类型要默认支持 "),s("strong",[this._v("Codable")]),this._v(" 协议，需要声明为具有原始值的形式，并且原始值的类型需要支持 "),s("strong",[this._v("Codable")]),this._v(" 协议：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Gender")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Decodable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" male\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" female\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" other\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h5",{attrs:{id:"bool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bool","aria-hidden":"true"}},[this._v("#")]),this._v(" Bool")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"isYoungPioneer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("var isYoungPioneer: Bool\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("Bool")]),t._v(" 类型原本没什么好讲的，不过因为踩到了坑，所以还是得说一说： 目前发现的坑是："),a("code",[t._v("Bool")]),t._v(" 类型默认"),a("strong",[t._v("只支持 true/false 形式的 Bool 值解析")]),t._v("。对于一些使用 "),a("code",[t._v("0")]),t._v("/"),a("code",[t._v("1")]),t._v(" 形式来表示 "),a("code",[t._v("Bool")]),t._v(" 值的后端框架，只能通过 "),a("code",[t._v("Int")]),t._v(" 类型解析之后再做转换了，或者可以自定义实现 "),a("strong",[t._v("Codable")]),t._v(" 协议。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h5",{attrs:{id:"日期解析策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#日期解析策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 日期解析策略")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("说了枚举和 "),a("code",[t._v("Bool")]),t._v("，另外一个常用的特殊类型就是 "),a("code",[t._v("Date")]),t._v(" 了，"),a("code",[t._v("Date")]),t._v(" 类型的特殊性在于它有着各种各样的格式标准和表示方式，从数字到字符串可以说是五花八门，解析 "),a("code",[t._v("Date")]),t._v(" 类型是任何一个同类型的框架都必须面对的课题。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("对此，"),a("strong",[t._v("Codable")]),t._v(" 给出的解决方案是：定义解析策略。"),a("code",[t._v("JSONDecoder")]),t._v(" 类声明了一个 "),a("code",[t._v("DateDecodingStrategy")]),t._v(" 类型的属性，用来制定 "),a("code",[t._v("Date")]),t._v(" 类型的解析策略，同样先看定义：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// The strategy to use for decoding `Date` values.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("DateDecodingStrategy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Defer to `Date` for decoding. This is the default strategy.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" deferredToDate\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Decode the `Date` as a UNIX timestamp from a JSON number.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" secondsSince1970\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Decode the `Date` as UNIX millisecond timestamp from a JSON number.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" millisecondsSince1970\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Decode the `Date` as an ISO-8601-formatted string (in RFC 3339 format).")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" iso8601\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Decode the `Date` as a string parsed by the given formatter.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("formatted")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("DateFormatter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Decode the `Date` as a custom value decoded by the given closure.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("custom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Decoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("strong",[t._v("Codable")]),t._v(" 对几种常用格式标准进行了支持，默认启用的策略是 "),a("code",[t._v("deferredToDate")]),t._v("，即从 **UTC 时间2001年1月1日 **开始的秒数，对应 "),a("code",[t._v("Date")]),t._v(" 类型中 "),a("code",[t._v("timeIntervalSinceReferenceDate")]),t._v(" 这个属性。比如 "),a("code",[t._v("519751611.125429")]),t._v(" 这个数字解析后的结果是 "),a("code",[t._v("2017-06-21 15:26:51 +0000")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("同时 "),s("strong",[this._v("Codable")]),this._v(" 提供了两种方自定义 "),s("code",[this._v("Date")]),this._v(" 格式的策略：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("formatted(DateFormatter)")]),t._v(" 这种策略通过设置 "),a("code",[t._v("DateFormatter")]),t._v(" 来指定 "),a("code",[t._v("Date")]),t._v(" 格式")]),t._v(" "),a("li",[a("code",[t._v("custom((Decoder) throws -> Date)")]),t._v(" "),a("code",[t._v("custom")]),t._v(" 策略接受一个 "),a("code",[t._v("(Decoder) -> Date")]),t._v(" 的闭包，基本上是把解析任务完全丢给我们自己去实现了，具有较高的自由度")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h5",{attrs:{id:"小数解析策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小数解析策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 小数解析策略")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("小数类型（"),a("code",[t._v("Float")]),t._v("／"),a("code",[t._v("Double")]),t._v("） 默认也实现了 "),a("strong",[t._v("Codable")]),t._v(" 协议，但是小数类型在 Swift 中有许多特殊值，比如圆周率（"),a("code",[t._v("Float.pi")]),t._v("）等。这里要说的是另外两个属性，先看定义：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Positive infinity.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("///")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Infinity compares greater than all finite numbers and equal to other")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// infinite values.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" infinity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Double")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/// A quiet NaN ("not a number").')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("///")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// A NaN compares not equal, not greater than, and not less than every")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// value, including itself. Passing a NaN to an operation generally results")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// in NaN.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nan"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Double")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("infinity")]),this._v(" 表示正无穷（负无穷写作："),s("code",[this._v("-infinity")]),this._v("），"),s("code",[this._v("nan")]),this._v(" 表示没有值，这些特殊值没有办法使用数字进行表示，但是在 Swift 中它们是确确实实的值，可以参与计算、比较等。 不同的语言、框架对此会有类似的实现，但是表达方式可能不完全相同，因此如果在某些场景下需要解析这样的值，就需要做特殊转换了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("strong",[t._v("Codable")]),t._v(" 的实现方式比较简单粗暴，"),a("code",[t._v("JSONDecoder")]),t._v(" 类型有一个属性 "),a("code",[t._v("nonConformingFloatDecodingStrategy")]),t._v(" ，用来指定不一致的小数转换策略，默认值为 "),a("code",[t._v("throw")]),t._v("， 即直接抛出异常，解析失败。另外一个选择就是自己指定 "),a("code",[t._v("infinity")]),t._v("、"),a("code",[t._v("-infinity")]),t._v("、"),a("code",[t._v("nan")]),t._v(" 三个特殊值的表示方式：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" decoder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("JSONDecoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndecoder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nonConformingFloatDecodingStrategy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("convertFromString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("positiveInfinity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"infinity"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" negativeInfinity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-infinity"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nan"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nan"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 另外一种表示方式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "∞", negativeInfinity: "-∞", nan: "n/a")')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"特殊数据类型-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特殊数据类型-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 特殊数据类型")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小明"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"age"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"weight"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("43.2")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"school"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"市第一中学"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"address"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XX市人民中路 66 号"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("School")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Decodable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Decodable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Int")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" weight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Float")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" school"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("School")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由于所有基本类型都实现了 "),a("strong",[t._v("Codable")]),t._v(" 协议，因此 "),a("code",[t._v("School")]),t._v(" 与 "),a("code",[t._v("Student")]),t._v(" 一样，只要所有属性都实现了 "),a("strong",[t._v("Codable")]),t._v(" 协议，就不需要手动提供任何实现即可获得默认的 "),a("strong",[t._v("Codable")]),t._v(" 实现。由于 "),a("code",[t._v("School")]),t._v(" 支持了 "),a("strong",[t._v("Codable")]),t._v(" 协议，保证了 "),a("code",[t._v("Student")]),t._v(" 依然能够获得默认的 "),a("strong",[t._v("Codable")]),t._v(" 实现，因此，嵌套类型的解析同样不需要额外的代码了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"自定义字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义字段","aria-hidden":"true"}},[this._v("#")]),this._v(" 自定义字段")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在研究自定义字段之前我们需要深入底层，了解下 "),a("strong",[t._v("Codable")]),t._v(" 默认是怎么实现属性的名称识别及赋值的。通过研究底层的 C++ 源代码可以发现，"),a("strong",[t._v("Codable")]),t._v(" 通过巧（kai）妙（guà）的方式，在编译代码时根据类型的属性，自动生成了一个 "),a("code",[t._v("CodingKeys")]),t._v(" 的枚举类型定义，这是一个以 "),a("code",[t._v("String")]),t._v(" 类型作为原始值的枚举类型，对应每一个属性的名称。然后再给每一个声明实现 "),a("strong",[t._v("Codable")]),t._v(" 协议的类型自动生成 "),a("code",[t._v("init(from:)")]),t._v(" 和 "),a("code",[t._v("encode(to:)")]),t._v(" 两个函数的具体实现，最终完成了整个协议的实现。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以我们可以自己实现 "),s("code",[this._v("CodingKeys")]),this._v(" 的类型定义，并且给属性指定不同的原始值来实现自定义字段的解析。这样编译器会直接采用我们已经实现好的方案而不再重新生成一个默认的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("比如 "),s("code",[this._v("Student")]),this._v(" 需要增加一个出生日期的属性，后端接口使用蛇形命名，JSON 数据如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小明"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"age"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"weight"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("43.2")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"birth_date"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1992-12-25"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这时候在 Student 类型声明中需要增加 "),s("code",[this._v("CodingKeys")]),this._v(" 定义，并且将 "),s("code",[this._v("birthday")]),this._v(" 的原始值设置为 "),s("code",[this._v("birth_date")]),this._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Codable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" birthday"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Date")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("CodingKeys")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("CodingKey")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" name\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" age\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" weight\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" birthday "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"birth_date"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("需要注意的是，即使属性名称与 JSON 中的字段名称一致，如果自定义了 "),s("code",[this._v("CodingKeys")]),this._v("，这些属性也是无法省略的，否则会得到一个 "),s("code",[this._v("Type 'Student' does not conform to protocol 'Codable'")]),this._v(" 的编译错误，这一点还是有点坑的。不过在编译时给 "),s("code",[this._v("CodingKeys")]),this._v(" 补全其他默认的属性的声明在理论上是可行的，期待苹果后续的优化了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"可选值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可选值","aria-hidden":"true"}},[this._v("#")]),this._v(" 可选值")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("有些字段有可能会是空值。还是用学生的出生日期来举例，假设有些学生的出生日期没有统计到，这时候后台返回数据格式有两种选择，一种是对于没有出生日期的数据，直接不包含 "),s("code",[this._v("birth_date")]),this._v(" 字段，另一种是指定为空值："),s("code",[this._v('"birth_date": null')])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" birthday"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"解析-json-数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析-json-数组","aria-hidden":"true"}},[this._v("#")]),this._v(" 解析 JSON 数组")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("Codable")]),this._v(" 协议同样支持数组类型，只需要满足一个前提：只要数组中的元素实现了 "),s("strong",[this._v("Codable")]),this._v(" 协议，数组将自动获得 "),s("strong",[this._v("Codable")]),this._v(" 协议的实现。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("使用 "),s("code",[this._v("JSONDecoder")]),this._v(" 解析时只需要指定类型为对应的数组即可：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" students "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("JSONDecoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" from"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 异常处理")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"归档数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#归档数据","aria-hidden":"true"}},[this._v("#")]),this._v(" 归档数据")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("归档数据使用 "),s("code",[this._v("Encodable")]),this._v(" 协议，使用方式与 "),s("code",[this._v("Decodable")]),this._v(" 一致。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"导出为-json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导出为-json","aria-hidden":"true"}},[this._v("#")]),this._v(" 导出为 JSON")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("JSONEncoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xiaomin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" json "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" encoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utf8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("OutputFormatting")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Produce JSON compacted by removing whitespace. This is the default formatting.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" compact\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Produce human-readable JSON with indented output.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" prettyPrinted\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("compact")]),this._v(" "),s("p",[this._v("默认的 compact 风格会移除 JSON 数据中的所有格式信息，比如换行、空格和缩紧等，以减小 JSON 数据所占的空间。如果导出的 JSON 数据用户程序间的通讯，对阅读要求不高时，推荐使用这个设置。")])]),this._v(" "),s("li",[s("p",[this._v("prettyPrinted")]),this._v(" "),s("p",[this._v("如果输出的 JSON 数据是用来阅读查看的，那么可以选择 prettyPrinted，这时候输出的 JSON 会自动进行格式化，添加换行、空格和缩进，以便于阅读。类似于上面文中使用的 JSON 排版风格。")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"属性列表-propertylist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性列表-propertylist","aria-hidden":"true"}},[this._v("#")]),this._v(" 属性列表(PropertyList)")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("Codable")]),this._v(" 协议并非只支持 JSON 格式的数据，它同样支持属性列表，即 mac 上常用的 "),s("code",[this._v("plist")]),this._v(" 文件格式。这在我们做一些系统配置之类的工作时会很有用。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("属性列表的解析和归档秉承了苹果API一贯的简洁易用的特点，使用方式 JSON 格式一致，并不需要对已经实现的 "),a("strong",[t._v("Codable")]),t._v(" 协议作任何修改，只需要将 "),a("code",[t._v("JSONEncoder")]),t._v(" 和 "),a("code",[t._v("JSONDecoder")]),t._v(" 替换成对应的 "),a("code",[t._v("PropertyListEncoder")]),t._v(" 和 "),a("code",[t._v("PropertyListDecoder")]),t._v(" 即可。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("属性列表本质上是特殊格式标准的 "),s("code",[this._v("XML")]),this._v(" 文档，所以理论上来说，我们可以参照系统提供的 Decoder/Encoder 自己实现任意格式的数据序列化与反序列化方案。同时苹果也随时可能通过实现新的 Decoder/Encoder 类来扩展其他数据格式的处理能力。这也正是文章开头所说的，"),s("strong",[this._v("Codable")]),this._v(" 的能力并不止于此，它具有很大的可扩展空间。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"结语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结语","aria-hidden":"true"}},[this._v("#")]),this._v(" 结语")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("Codable")]),this._v(" 比较常用的几个框架，个人比较喜欢")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("总体来说，"),s("strong",[this._v("Codable")]),this._v(" 作为语言层面对模型解析的支持方案，有其自身的优势。不过在灵活性上稍有欠缺，对自定义字段的支持也还不够人性化，期待后续的完善。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于第三方库来说，"),s("strong",[this._v("Codable")]),this._v(" 的推出既是一种挑战，但同时也是一个机遇，相信这些框架的作者们都会从 Codaable 获得许多灵感来优化提升自己的框架，在不久的将来制造一个百家争鸣的局面。")])}],n=a(0),r=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),a("p",[t._v("比如我们有下面这样一个学生信息的 JSON 字符串：")]),t._v(" "),t._m(9),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),a("p",[t._v("这里需要注意的是, "),a("code",[t._v("decode")]),t._v(" 函数需要外部数据类型为 "),a("code",[t._v("Data")]),t._v(" 类型，如果是字符串需要先转换为 "),a("code",[t._v("Data")]),t._v(" 之后操作，不过像 "),a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FAlamofire%2FAlamofire",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("Alamofire")]),a("OutboundLink")],1),t._v(" 之类的网络框架，返回数据原本就是 "),a("code",[t._v("Data")]),t._v(" 类型的。 另外 "),a("code",[t._v("decode")]),t._v(" 函数是标记为 "),a("code",[t._v("throws")]),t._v(" 的，如果解析失败，会抛出一个异常，为了保证程序的健壮性，需要使用 "),a("code",[t._v("do-catch")]),t._v(" 对异常情况进行处理:")]),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),a("p",[t._v("性别是一个很常用的信息，我们经常会把它定义成枚举：")]),t._v(" "),t._m(19),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),a("p",[t._v("由于枚举类型原始值隐式赋值特性的存在，如果枚举值的名称和对应的 JSON 中的值一致，不需要显式指定原始值即可完成解析。")]),t._v(" "),t._m(24),t._v(" "),a("p",[t._v("我们的数据模型现在新增了一个字段，用来表示某个学生是否是少先队员：")]),t._v(" "),t._m(25),a("p",[t._v("这时候，直接声明对应的属性就可以了:")]),t._v(" "),t._m(26),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._m(32),t._v(" "),a("p",[t._v("另外可选的格式标准有 "),a("code",[t._v("secondsSince1970")]),t._v("、"),a("code",[t._v("millisecondsSince1970")]),t._v("、"),a("a",{attrs:{href:"https://link.juejin.im?target=https%3A%2F%2Fzh.wikipedia.org%2Fwiki%2FISO_8601",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("iso8601")]),a("OutboundLink")],1),t._v(" 等，这些都是有详细说明的通用标准，不清楚的自行谷歌吧 😃")]),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),a("p",[t._v("目前看来只支持这三个特殊值的转换，不过这种特殊值的使用场景应该非常有限，至少在我自己五六年的开发生涯中还没有遇到过。")]),t._v(" "),t._m(41),t._v(" "),a("p",[t._v("纯粹的基本数据类型依然不能很好地工作，实际项目的数据结构往往是很复杂的，一个数据类型经常会包含另一个数据类型的属性。比如说我们这个例子中，每个学生信息中还包含了所在学校的信息：")]),t._v(" "),t._m(42),a("p",[t._v("这时候就需要 Student 和 School 两个类型来组合表示：")]),t._v(" "),t._m(43),t._m(44),t._v(" "),t._m(45),t._v(" "),a("p",[t._v("很多时候前后端不一定能完全步调一致，观念相同。所以往往后端给出的数据结构中会有一些比较个性的字段名，当然有时候是我们自己。另外有一些框架（比如我正在用的 Laravel）习惯使用蛇形命名法，而 iOS 的代码规范推荐使用驼峰命名法，为了保证代码风格和平台特色，这时候就必须要自行指定字段名了。")]),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._m(50),t._v(" "),t._m(51),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),a("p",[t._v("对于这两种形式，都只需要将 birthday 属性声明为可选值即可正常解析：")]),t._v(" "),t._m(55),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._v(" "),a("p",[t._v("将数据模型转换为 JSON 与解析过程类似，将 JSONDecoder 更换为 JSONEncoder 即可：")]),t._v(" "),t._m(63),a("p",[t._v("JSONEncoder 有一个 outputFormatting 的属性，可以指定输出 JSON 的排版风格，看定义：")]),t._v(" "),t._m(64),t._m(65),t._v(" "),t._m(66),t._v(" "),t._m(67),t._v(" "),t._m(68),t._v(" "),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tristanhimmelman/ObjectMapper",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("ObjectMapper")]),a("OutboundLink")],1),t._v(" 使用范型机制进行模型解析，但是需要手动对每一个属性写映射关系，比较繁琐。我自己项目中也是用的这个框架，后来自己对其做了些优化，利用反射机制对基本数据类型实现了自动解析，但是自定义类型仍然需要手动写映射，并且必须继承实现了自动解析的 Model 基类，限制较多。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/SwiftyJSON/SwiftyJSON",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("SwiftyJSON")]),a("OutboundLink")],1),t._v(" 简单了解过，其本质其实只是将 JSON 解析成了字典类型的数据，而实际使用时依然需要使用下标方式去取值，非常繁琐且容易出错，不易阅读和维护，个人认为这是很糟糕的设计。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/alibaba/HandyJSON",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("HandyJSON")]),a("OutboundLink")],1),t._v(" 是阿里推出的框架，思路与 "),a("strong",[t._v("Codable")]),t._v(" 殊途同归，之前也用过一阵，当时因为对枚举和 "),a("code",[t._v("Date")]),t._v(" 等类型的支持还不够完善，最终还是用回了"),a("strong",[t._v("ObjectMapper")]),t._v("。不过目前看来完善程度已经很高了，或许可以再次尝试踩下坑。")]),t._v(" "),t._m(72),t._v(" "),t._m(73)])},e,!1,null,null,null);s.default=r.exports}}]);