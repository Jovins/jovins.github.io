(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{227:function(t,e,s){t.exports=s.p+"assets/img/git-flow-1.994b9d70.png"},228:function(t,e,s){t.exports=s.p+"assets/img/git-flow-2.37006c51.png"},551:function(t,e,s){"use strict";s.r(e);var a=[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"git-flow-的工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-flow-的工作流程","aria-hidden":"true"}},[this._v("#")]),this._v(" Git-Flow 的工作流程")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"什么是-git-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-git-flow","aria-hidden":"true"}},[this._v("#")]),this._v(" 什么是 git-flow")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"安装-git-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-git-flow","aria-hidden":"true"}},[this._v("#")]),this._v(" 安装 git-flow")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"在项目中设置-git-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在项目中设置-git-flow","aria-hidden":"true"}},[this._v("#")]),this._v(" 在项目中设置 git-flow")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" flow init\nInitialized empty Git repository "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" /Users/tobi/acme-website/.git/\nBranch name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" production releases: "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \nBranch name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"next release"')]),t._v(" development: "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("develop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n\nHow to name your supporting branch prefixes?\nFeature branches? "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("feature/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \nRelease branches? "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("release/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \nHotfix branches? "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("hotfix/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"分支的模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支的模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 分支的模式")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("strong",[t._v("master")]),t._v(" 只能用来包括产品代码。你不能直接工作在这个 master 分支上，而是在其他指定的，独立的特性分支中（这方面我们会马上谈到）。不直接提交改动到 "),s("em",[t._v("master")]),t._v(" 分支上也是很多工作流程的一个共同的规则。")]),t._v(" "),s("li",[s("strong",[t._v("develop")]),t._v(" 是你进行任何新的开发的基础分支。当你开始一个新的功能分支时，它将是_开发_的基础。另外，该分支也汇集所有已经完成的功能，并等待被整合到 "),s("em",[t._v("master")]),t._v(" 分支中。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:s(227),alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:s(228),alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"功能开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能开发","aria-hidden":"true"}},[this._v("#")]),this._v(" 功能开发")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("开始新功能")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" flow feature start rss-feed\nSwitched to a new branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'feature/rss-feed'")]),t._v("\n\nSummary of actions:\n- A new branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'feature/rss-feed'")]),t._v(" was created, based on "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'develop'")]),t._v("\n- You are now on branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'feature/rss-feed'")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[this._v("git")]),this._v(" flow feature "),e("span",{pre:!0,attrs:{class:"token function"}},[this._v("help")]),this._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("完成一个功能")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" flow feature finish rss-feed\nSwitched to branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'develop'")]),t._v("\nUpdating 6bcf266"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("41748ad\nFast-forward\n    feed.xml "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" 0\n    1 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, 0 insertions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", 0 deletions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    create mode 100644 feed.xml\nDeleted branch feature/rss-feed "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("was 41748ad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("一个在更广泛的 “开发” 背景下的全面测试。")]),this._v(" "),e("li",[this._v("稍后和所有积攒在 “develop” 分支中的其它功能一起进行发布。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("创建 release")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[this._v("git")]),this._v(" flow release start 1.1.5\nSwitched to a new branch "),e("span",{pre:!0,attrs:{class:"token string"}},[this._v("'release/1.1.5'")]),this._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("完成 release")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[this._v("git")]),this._v(" flow release finish 1.1.5\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("首先，git-flow 会拉取远程仓库，以确保目前是最新的版本。")]),this._v(" "),e("li",[this._v("然后，release 的内容会被合并到 “master” 和 “develop” 两个分支中去，这样不仅产品代码为最新的版本，而且新的功能分支也将基于最新代码。")]),this._v(" "),e("li",[this._v("为便于识别和做历史参考，release 提交会被标记上这个 release 的名字（在我们的例子里是 “1.1.5”）。")]),this._v(" "),e("li",[this._v("清理操作，版本分支会被删除，并且回到 “develop”。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"hotfix"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hotfix","aria-hidden":"true"}},[this._v("#")]),this._v(" hotfix")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("创建 Hotfixes")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[this._v("git")]),this._v(" flow hotfix start missing-link\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("完成 Hotfixes")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[this._v("git")]),this._v(" flow hotfix finish missing-link\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("完成的改动会被合并到 “master” 中，同样也会合并到 “develop” 分支中，这样就可以确保这个错误不会再次出现在下一个 release 中。")]),this._v(" "),e("li",[this._v("这个 hotfix 程序将被标记起来以便于参考。")]),this._v(" "),e("li",[this._v("这个 hotfix 分支将被删除，然后切换到 “develop” 分支上去。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"回顾一下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回顾一下","aria-hidden":"true"}},[this._v("#")]),this._v(" 回顾一下")])}],r=s(0),n=Object(r.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.git-tower.com/learn/git/ebook/cn/command-line/basics/what-is-version-control",target:"_blank",rel:"noopener noreferrer"}},[t._v("Learn Version Control with Git"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("当在团队开发中使用版本控制系统时，商定一个统一的工作流程是至关重要的。Git 的确可以在各个方面做很多事情，然而，如果在你的团队中还没有能形成一个特定有效的工作流程，那么混乱就将是不可避免的。")]),t._v(" "),s("p",[t._v("基本上你可以定义一个完全适合你自己项目的工作流程，或者使用一个别人定义好的。")]),t._v(" "),s("p",[t._v("在这章节中我们将一起学习一个当前非常流行的工作流程 git-flow。")]),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("一旦安装安装 git-flow，你将会拥有一些扩展命令。这些命令会在一个预定义的顺序下自动执行多个操作。是的，这就是我们的工作流程！")]),t._v(" "),s("p",[t._v("git-flow 并不是要替代 Git，它仅仅是非常聪明有效地把标准的 Git 命令用脚本组合了起来。")]),t._v(" "),s("p",[t._v("严格来讲，你并不需要安装什么特别的东西就可以使用 git-flow 工作流程。你只需要了解，哪些工作流程是由哪些单独的任务所组成的，并且附带上正确的参数，以及在一个正确的顺序下简单执行那些对应的 Git 命令就可以了。当然，如果你使用 git-flow 脚本就会更加方便了，你就不需要把这些命令和顺序都记在脑子里。")]),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("近些年来出现了很多不同的安装方法。在本章节中我们会使用当前最流行的一种： "),s("a",{attrs:{href:"https://github.com/petervanderdoes/gitflow/",target:"_blank",rel:"noopener noreferrer"}},[t._v("AVH Edition"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("要了解安装 git-flow 细节，请阅读下面这个文档 "),s("a",{attrs:{href:"https://github.com/petervanderdoes/gitflow/wiki#installing-git-flow",target:"_blank",rel:"noopener noreferrer"}},[t._v("official documentation"),s("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(3),t._v(" "),s("p",[t._v("当你想把你的项目 “切换” 到 git-flow 上后，Git 还是可以像往常一样工作的。这完全是取决于你在仓库上使用特殊的 git-flow 命令或是普通的 Git 命令。换句话说，git-flow 它不会以任何一种戏剧性的方式来改变你的仓库。")]),t._v(" "),s("p",[t._v("话虽如此，git-flow 却存在一些限制。让我们开始在一个新的项目上初始化它吧，之后我们就会有所发现：")]),t._v(" "),t._m(4),s("p",[t._v("当在项目的根目录执行 “git flow init” 命令时（它是否已经包括了一个 Git 仓库并不重要），一个交互式安装助手将引导您完成这个初始化操作。听起来是不是有点炫，但实际上它只是在你的分支上配置了一些命名规则。\n尽管如此，这个安装助手还是允许你使用自己喜欢的名字。我强烈建议你使用默认的命名机制，并且一步一步地确定下去。")]),t._v(" "),t._m(5),t._v(" "),s("p",[t._v("git-flow 模式会预设两个主分支在仓库中：")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),s("p",[t._v("这两个分支被称作为 "),s("a",{attrs:{href:"https://www.git-tower.com/learn/git/ebook/cn/command-line/branching-merging/branching-workflows",target:"_blank",rel:"noopener noreferrer"}},[t._v("长期分支"),s("OutboundLink")],1),t._v("。它们会存活在项目的整个生命周期中。而其他的分支，例如针对功能的分支，针对发行的分支，仅仅只是临时存在的。它们是根据需要来创建的，当它们完成了自己的任务之后就会被删除掉。")]),t._v(" "),t._m(8),t._v(" "),s("p",[t._v("让我们开始探索一些在现实应用中可能遇到的案例吧！")]),t._v(" "),t._m(9),t._v(" "),s("p",[t._v("对于一个开发人员来说，最平常的工作可能就是功能的开发。这就是为什么 git-flow 定义了很多对于功能开发的工作流程，从而来帮助你有组织地完成它。")]),t._v(" "),t._m(10),t._v(" "),s("p",[t._v("让我们开始开发一个新功能 “rss-feed”：")]),t._v(" "),t._m(11),s("p",[t._v("在这些命令的输出文本中，git-flow 会对刚刚完成的操作打印出一个很有帮助的概述")]),t._v(" "),s("p",[t._v("当你需要帮助的时候，你可以随时请求帮助。例如：")]),t._v(" "),t._m(12),s("p",[t._v("正如上面这个新功能一样，git-flow 会创建一个名为 “feature/rss-feed” 的分支（这个 “feature/” 前缀 是一个可配置的选项设置）。你已经知道了，在你做新功能开发时使用一个独立的分支是版本控制中最重要的规则之一。\ngit-flow 也会直接签出这个新的分支，这样你就可以直接进行工作了。")]),t._v(" "),t._m(13),t._v(" "),s("p",[t._v("经过一段时间艰苦地工作和一系列的聪明提交，我们的新功能终于完成了：")]),t._v(" "),t._m(14),s("p",[t._v("最重要的是，这个 “feature finish” 命令会把我们的工作整合到主 “develop” 分支中去。在这里它需要等待：")]),t._v(" "),t._m(15),t._v(" "),s("p",[t._v("之后，git-flow 也会进行清理操作。它会删除这个当下已经完成的功能分支，并且换到 “develop” 分支。")]),t._v(" "),s("p",[t._v("##管理 releases")]),t._v(" "),s("p",[t._v("Release 管理是版本控制处理中的另外一个非常重要的话题。让我们来看看如何利用 git-flow 创建和发布 release。")]),t._v(" "),t._m(16),t._v(" "),s("p",[t._v("当你认为现在在 “develop” 分支的代码已经是一个成熟的 release 版本时，这意味着：第一，它包括所有新的功能和必要的修复；第二，它已经被彻底的测试过了。如果上述两点都满足，那就是时候开始生成一个新的 release 了：")]),t._v(" "),t._m(17),s("p",[t._v("请注意，release 分支是使用版本号命名的。这是一个明智的选择，这个命名方案还有一个很好的附带功能，那就是当我们完成了release 后，git-flow 会适当地_自动_去标记那些 release 提交。")]),t._v(" "),s("p",[t._v("有了一个 release 分支，再完成针对 release 版本号的最后准备工作（如果项目里的某些文件需要记录版本号），并且进行最后的编辑。")]),t._v(" "),t._m(18),t._v(" "),s("p",[t._v("现在是时候按下那个危险的红色按钮来完成我们的release了：")]),t._v(" "),t._m(19),s("p",[t._v("这个命令会完成如下一系列的操作：")]),t._v(" "),t._m(20),t._v(" "),s("p",[t._v("从 Git 的角度来看，release 版本现在已经完成。依据你的设置，对 “master” 的提交可能已经触发了你所定义的部署流程，或者你可以通过手动部署，来让你的软件产品进入你的用户手中。")]),t._v(" "),t._m(21),t._v(" "),s("p",[t._v("很多时候，仅仅在几个小时或几天之后，当对 release 版本作做全面测试时，可能就会发现一些小错误。\n在这种情况下，git-flow 提供一个特定的 “hotfix” 工作流程（因为在这里不管使用 “功能” 分支流程，还是 “release” 分支流程都是不恰当的）。")]),t._v(" "),t._m(22),t._v(" "),t._m(23),s("p",[t._v("这个命令会创建一个名为 “hotfix/missing-link” 的分支。因为这是对产品代码进行修复，所以这个 hotfix 分支是基于 “master” 分支。\n这也是和 release 分支最明显的区别，release 分支都是基于 “develop” 分支的。因为你不应该在一个还不完全稳定的开发分支上对产品代码进行地修复。")]),t._v(" "),s("p",[t._v("就像 release 一样，修复这个错误当然也会直接影响到项目的版本号！")]),t._v(" "),t._m(24),t._v(" "),s("p",[t._v("在把我们的修复提交到 hotfix 分支之后，就该去完成它了：")]),t._v(" "),t._m(25),s("p",[t._v("这个过程非常类似于发布一个 release 版本：")]),t._v(" "),t._m(26),t._v(" "),s("p",[t._v("还是和产生 release 的流程一样，现在需要编译和部署你的产品（如果这些操作不是自动被触发的话）。")]),t._v(" "),t._m(27),t._v(" "),s("p",[t._v("最后，在结束这个章节之前，我要再次强调几个重点。\n首先，git-flow 并不会为 Git 扩展任何新的功能，它仅仅使用了脚本来捆绑了一系列 Git 命令来完成一些特定的工作流程。\n其次，定义一个固定的工作流程会使得团队协作更加简单容易。无论是一个 “版本控制的新手” 还是 “Git 专家”，每一个人都知道如何来正确地完成某个任务。")]),t._v(" "),s("p",[t._v("记住，使用 git-flow 并不是必须的。当积攒了一定的使用经验后，很多团队会不再需要它了。当你能正确地理解工作流程的基本组成部分和目标的之后，你完全可以定义一个属于你自己的工作流程。")])])},a,!1,null,null,null);e.default=n.exports}}]);