(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{193:function(a,t,e){"use strict";e.r(t);var n=e(0),s=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"go-环境变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#go-环境变量","aria-hidden":"true"}},[a._v("#")]),a._v(" Go 环境变量")]),a._v(" "),e("p",[a._v("无论你是使用Windows,Linux还是Mac OS操作系统来开发Go应用程序，在安装好Go安装语言开发工具之后，都必须配置好Go语言开发所要求的 环境变量，才算初步完成Go开发环境的搭建。")]),a._v(" "),e("p",[a._v("但对于一些初学者来说，可能不太明白Go语言中常用的"),e("code",[a._v("环境变量(Environment variables)")]),a._v("的作用以及如何设置环境变量，今天我们来讲讲。")]),a._v(" "),e("blockquote",[e("p",[a._v("注意：Go提供的Windows操作系统安装包(.msi后缀)安装完成后，会自动配置几个常用的环境变量。")])]),a._v(" "),e("h2",{attrs:{id:"常用环境变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用环境变量","aria-hidden":"true"}},[a._v("#")]),a._v(" 常用环境变量")]),a._v(" "),e("p",[a._v("Go语言中可以设置的环境变量有很多，每个环境变量都有其作用，不过很多我们可能都用不到，一般需要了解也是最重要的有以下几个：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ go env //打印Go所有默认环境变量\n$ go env GOPATH //打印某个环境变量的值\n")])])]),e("h4",{attrs:{id:"goroot"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#goroot","aria-hidden":"true"}},[a._v("#")]),a._v(" GOROOT")]),a._v(" "),e("p",[a._v("环境变量"),e("code",[a._v("GOROOT")]),a._v("表示Go语言的安装目录。")]),a._v(" "),e("p",[a._v("在"),e("code",[a._v("Windows")]),a._v("中，"),e("code",[a._v("GOROOT")]),a._v("的默认值是"),e("code",[a._v("C:/go")]),a._v("，而在"),e("code",[a._v("Mac OS")]),a._v("或"),e("code",[a._v("Linux")]),a._v("中"),e("code",[a._v("GOROOT")]),a._v("的默认值是"),e("code",[a._v("usr/loca/go")]),a._v("，如果将Go安装在其他目录中，而需要将GOROOT的值修改为对应的目录。")]),a._v(" "),e("p",[a._v("另外，"),e("code",[a._v("GOROOT/bin")]),a._v("则包含Go为我们提供的工具链，因此，应该将"),e("code",[a._v("GOROOT/bin")]),a._v("配置到环境变量PATH中，方便我们在全局中使用Go工具链。")]),a._v(" "),e("p",[e("strong",[a._v("Linux设置GOROOT演示")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("export GOROOT=~/go\nexport PATH=$PATH:$GOROOT/bin\n")])])]),e("h4",{attrs:{id:"gopath"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gopath","aria-hidden":"true"}},[a._v("#")]),a._v(" GOPATH")]),a._v(" "),e("blockquote",[e("p",[a._v("注意，"),e("code",[a._v("GOPATH")]),a._v("的值不能与"),e("code",[a._v("GOROOT")]),a._v("相同。")])]),a._v(" "),e("p",[a._v("环境变量"),e("code",[a._v("GOPATH")]),a._v("用于指定我们的开发工作区(workspace),是存放源代码、测试文件、库静态文件、可执行文件的工作。")]),a._v(" "),e("p",[a._v("在"),e("code",[a._v("类Unix")]),a._v("(Mac OS或Linux)操作系统中"),e("code",[a._v("GOPATH")]),a._v("的默认值是$home/go。而在Windows中GOPATH的默认值则为%USERPROFILE%\\go(比如在Admin用户，其值为C:\\Users\\Admin\\go)。")]),a._v(" "),e("p",[a._v("当然，我们可以通过修改GOPATH来更换工作区，比如将工作设置"),e("code",[a._v("opt/go")]),a._v("方式如下：")]),a._v(" "),e("p",[e("strong",[a._v("Linux设置GOPATH演示")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("export GOPATH=/opt/go\n")])])]),e("p",[a._v("还有，可以在GOPATH中设置多个工作区，如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("export GOPATH=/opt/go;$home/go\n")])])]),e("p",[e("strong",[a._v("GOPATH的子目录")])]),a._v(" "),e("p",[a._v("上面的代码表示我们指定两个工作区，不过当我们使用"),e("code",[a._v("go get")]),a._v("命令去获取远程库的时候，一般会安装到第一个工作区当中。")]),a._v(" "),e("p",[a._v("按照Go开发规范，GOPATH目录下的每个工作一般分为三个子目录:"),e("code",[a._v("src")]),a._v(","),e("code",[a._v("pkg")]),a._v(","),e("code",[a._v("bin")]),a._v("，所以我们看到的每个工作区是这样子的：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("bin/\n    hello                      # 可执行文件\n    outyet                     # 可执行文件\nsrc/\n    github.com/golang/example/\n        .git/                 \n    hello/\n        hello.go               # 命令行代码\n    outyet/\n        main.go                # 命令行代码\n        main_test.go           # 测试代码\n    stringutil/\n        reverse.go             # 库文件\n        reverse_test.go        # 库文件\n    golang.org/x/image/\n        .git/                  \n    bmp/\n        reader.go              # 库文件\n        writer.go              # 库文件\n")])])]),e("p",[e("code",[a._v("src")]),a._v("目录放的是我们开发的源代码文件，其下面对应的目录称为"),e("code",[a._v("包")]),a._v(","),e("code",[a._v("pkg")]),a._v("放的是编译后的库静态文件，"),e("code",[a._v("bin")]),a._v("放的是源代码编译后台的可执行文件。")]),a._v(" "),e("h4",{attrs:{id:"gobin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gobin","aria-hidden":"true"}},[a._v("#")]),a._v(" GOBIN")]),a._v(" "),e("p",[a._v("环境变量"),e("code",[a._v("GOBIN")]),a._v("表示我们开发程序编译后二进制命令的安装目录。")]),a._v(" "),e("p",[a._v("当我们使用"),e("code",[a._v("go install")]),a._v("命令编译和打包应用程序时，该命令会将编译后二进制程序打包GOBIN目录，一般我们将GOBIN设置为"),e("code",[a._v("GOPATH/bin")]),a._v("目录。")]),a._v(" "),e("p",[e("strong",[a._v("Linux设置GOBIN演示")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("export GOBIN=$GOPATH/bin\n")])])]),e("p",[a._v("上面的代码中，我们都是使用export命令设置环境变量的，这样设置只能在当前shell中有效，如果想一直有效，如在Linux中，则应该将环境变量添加到"),e("code",[a._v("/etc/profile")]),a._v("等文件当中。")]),a._v(" "),e("h2",{attrs:{id:"交叉编译"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#交叉编译","aria-hidden":"true"}},[a._v("#")]),a._v(" 交叉编译")]),a._v(" "),e("p",[a._v("什么是交叉编译？所谓的交叉编译，是指在一个平台上就能生成可以在另一个平台运行的代码，例如，我们可以32位的Windows操作系统开发环境上，生成可以在64位Linux操作系统上运行的二进制程序。")]),a._v(" "),e("p",[a._v("在其他编程语言中进行交叉编译可能要借助第三方工具，但在Go语言进行交叉编译非常简单，最简单只需要设置GOOS和GOARCH这两个环境变量就可以了。")]),a._v(" "),e("p",[a._v("####GOOS与GOARCH")]),a._v(" "),e("p",[a._v("GOOS的默认值是我们当前的操作系统， 如果windows，linux,注意mac os操作的上的值是darwin。 GOARCH则表示CPU架构，如386，amd64,arm等。")]),a._v(" "),e("p",[e("strong",[a._v("获取GOOS和GOARCH的值")])]),a._v(" "),e("p",[a._v("我们可以使用"),e("code",[a._v("go env")]),a._v("命令获取当前GOOS和GOARCH的值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ go env GOOS GOARCH\n")])])]),e("p",[e("strong",[a._v("GOOS和GOARCH的取值范围")])]),a._v(" "),e("p",[a._v("GOOS和GOARCH的值成对出现，而且只能是下面列表对应的值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$GOOS\t    $GOARCH\nandroid\t    arm\ndarwin\t    386\ndarwin\t    amd64\ndarwin\t    arm\ndarwin\t    arm64\ndragonfly   amd64\nfreebsd\t    386\nfreebsd\t    amd64\nfreebsd\t    arm\nlinux\t    386\nlinux\t    amd64\nlinux\t    arm\nlinux\t    arm64\nlinux\t    ppc64\nlinux\t    ppc64le\nlinux\t    mips\nlinux\t    mipsle\nlinux\t    mips64\nlinux\t    mips64le\nlinux\t    s390x\nnetbsd\t    386\nnetbsd\t    amd64\nnetbsd\t    arm\nopenbsd\t    386\nopenbsd\t    amd64\nopenbsd\t    arm\nplan9\t    386\nplan9\t    amd64\nsolaris\t    amd64\nwindows\t    386\nwindows\t    amd64\n")])])]),e("h4",{attrs:{id:"示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例","aria-hidden":"true"}},[a._v("#")]),a._v(" 示例")]),a._v(" "),e("p",[e("strong",[a._v("编译在64位Linux操作系统上运行的目标程序")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ GOOS=linux GOARCH=amd64 go build main.go\n")])])]),e("p",[e("strong",[a._v("编译arm架构Android操作上的目标程序")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("$ GOOS=android GOARCH=arm GOARM=7 go build main.go\n")])])]),e("h2",{attrs:{id:"环境变量列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#环境变量列表","aria-hidden":"true"}},[a._v("#")]),a._v(" 环境变量列表")]),a._v(" "),e("p",[a._v("虽然我们一般虽然配置的环境变量就那么几个，但其实Go语言是提供了非常多的环境变量，让我们可以自由地定制开发和编译器行为。")]),a._v(" "),e("p",[a._v("下面是Go提供的所有的环境变量列表，一般可以划分为下面几大类，大概了解一下就可以了，因为有些环境变量我们可以永远都不会用到。")]),a._v(" "),e("h4",{attrs:{id:"通过环境变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过环境变量","aria-hidden":"true"}},[a._v("#")]),a._v(" 通过环境变量")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("GCCGO\nGOARCH\nGOBIN\nGOCACHE\nGOFLAGS\nGOOS\nGOPATH\nGOPROXY\nGORACE\nGOROOT\nGOTMPDIR\n")])])]),e("h4",{attrs:{id:"和cgo一起使用的环境变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#和cgo一起使用的环境变量","aria-hidden":"true"}},[a._v("#")]),a._v(" 和cgo一起使用的环境变量")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("CC\nCGO_ENABLED\nCGO_CFLAGS\nCGO_CFLAGS_ALLOW\nCGO_CFLAGS_DISALLOW\nCGO_CPPFLAGS, CGO_CPPFLAGS_ALLOW, CGO_CPPFLAGS_DISALLOW\nCGO_CXXFLAGS, CGO_CXXFLAGS_ALLOW, CGO_CXXFLAGS_DISALLOW\nCGO_FFLAGS, CGO_FFLAGS_ALLOW, CGO_FFLAGS_DISALLOW\nCGO_LDFLAGS, CGO_LDFLAGS_ALLOW, CGO_LDFLAGS_DISALLOW\nCXX\nPKG_CONFIG\nAR\n")])])]),e("h4",{attrs:{id:"与系统架构体系相关的环境变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#与系统架构体系相关的环境变量","aria-hidden":"true"}},[a._v("#")]),a._v(" 与系统架构体系相关的环境变量")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("GOARM\nGO386\nGOMIPS\nGOMIPS64\n复制代码\n")])])]),e("h4",{attrs:{id:"专用的环境变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#专用的环境变量","aria-hidden":"true"}},[a._v("#")]),a._v(" 专用的环境变量")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("GCCGOTOOLDIR\nGOROOT_FINAL\nGO_EXTLINK_ENABLED\nGIT_ALLOW_PROTOCOL\n")])])]),e("h4",{attrs:{id:"其他环境变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他环境变量","aria-hidden":"true"}},[a._v("#")]),a._v(" 其他环境变量")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("GOEXE\nGOHOSTARCH\nGOHOSTOS\nGOMOD\nGOTOOLDIR\n")])])])])}],!1,null,null,null);t.default=s.exports}}]);